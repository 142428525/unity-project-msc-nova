@<|
label('tut02', '教程2 图像')
is_start()
|>
<|
stop(bgm)
set_box()
|>
教程2 图像

<|
show(bg, 'rain')
|>
`show`函数可以显示图片

`bg`是图片的controller在Lua中的名称

在Unity Editor的Hierarchy窗口里选中`Sprites/BackgroundImage`，在Inspector窗口的`SpriteController`里就能看到`luaGlobalName`是`bg`

图片所在的文件夹由`SpriteController`的`imageFolder`设置

`rain`是这个文件夹中的图片文件名（不需要后缀名）

<|
show(bg2, 'room', {2, 2})
|>
可以同时显示多个图层，每个图层对应一个game object。上面的`bg2`对应的就是`BackgroundImage2`

如果需要更多图层，可以在Unity Editor中复制更多的game object

顺便说一句：：图层的顺序一般由z坐标决定。上面的`{2, 2}`是x、y坐标，马上就会讲到

<|
show(bg, 'corridor')
|>
对同一个图层再次使用`show`，则会替换当前的图片

Inspector中的`SpriteRenderer`的`sprite`会显示这个图层当前的图片

<|
hide(bg2)
|>
`hide`函数可以隐藏图片

<|
move(bg, {1, 0})
|>
`move`函数可以移动图片

`{1, 0}`是图片的x、y坐标，可以在Inspector中的`Transform`里看到

<|
move(bg, {0, 1, 2})
|>
如果有第三个参数，则是缩放的倍数

Lua中的参数必须先省略前面的，再省略后面的。想要只省略前面的参数，可以用`nil`

<|
move(bg, {nil, -2, 0.5})
|>
`move`遇到省略的参数时，会保持之前的值。利用这一点可以避免把同一个坐标输很多遍，以至于修改的时候也要改很多遍

<|
move(bg, {nil, nil, {0.5, 2}})
|>
如果第三个参数是一个table，则会分别设置x、y方向的缩放（如果是三维模型，还可以设置z方向的缩放）

<|
move(bg, {0, 0, 1, 11, 30})
|>
如果还有第四、第五个参数，则是z坐标和绕z轴的旋转角度

<|
move(bg, {nil, nil, nil, nil, {60, 40, 20}})
|>
如果第五个参数是一个table，则会分别设置绕x、y、z轴的旋转

顺便说一句：：为了方便只有二维演出的作品，Nova脚本中的坐标的前三个参数是x、y、缩放，而不是x、y、z

顺便说一句：：摄像机的模式默认是orthographic，这时z坐标不会影响图片显示的大小，只会影响图层顺序

顺便说一句：：如果需要做三维演出，你可以把摄像机改成perspective，这时z坐标就会影响图片显示的大小

顺便说一句：：Unity的渲染顺序也不完全是由z坐标决定的，如果要仔细调整的话可以用render queue，这个以后再说。。

<|
move(bg, {0, 0, 1, 10, 0})
show(bg2, 'room', {2, 2})
|>
好了，把背景恢复正常，并且把`bg2`显示出来

<|
tint(bg2, {1, 0.5, 0})
|>
`tint`函数可以改变图片的颜色

原理是给图片的RGBA通道分别乘上一个0..1之间的系数，可以在Inspector中的`SpriteRenderer`的`color`里看到

顺便说一句：：乘上系数会让RGBA的数值变小，图片变暗，所以准备美术素材的时候可以画得亮一点

Nova脚本中的颜色用一个table表示，可以包括1..4个数值

<|
tint(bg2, 0.5)
|>
1个数值：`r, g, b`均为该值，`a`为1，只改变明暗而不改变色调（这时可以不用table，只用一个数值）

<|
tint(bg2, {1, 0.5})
|>
2个数值：`r, g, b`均为第一个值，`a`为第二个值

<|
tint(bg2, {0, 0.5, 1})
|>
3个数值：`r, g, b`为这三个数值，`a`为1

<|
tint(bg2, {0.5, 0, 1, 0.5})
|>
4个数值：`r, g, b, a`为这四个数值

<|
hide(bg2)
move(bg2, {0, 0})
tint(bg2, 1)
|>
隐藏`bg2`。如果接下来长时间用不到一个图层，最好把坐标和颜色恢复原状，以免下次用到的时候忘了
@<| is_end() |>
